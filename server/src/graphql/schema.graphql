# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}

# type Subscription {
#   surveyUpdates (surveyId: Int!): Survey
# }

type Query {
  # Returns a Party if one exists with the partyName, and its optional password matches the optional partyPassword.
  # Otherwise, null.
  party (partyName: String!, partyPassword: String): Party

  # Returns all Song sorted by song title.
  songs: [Song!]
}

type Mutation {
  # Creates a Party with the optional partyPassword if one does not yet exist with the partyName.
  # Returns that newly created Party, or null if a Party already exists with the partyName.
  createParty (partyName: String!, partyPassword: String): Party

  # Votes for a Song in the context of a Party.
  # Returns the VotedSong if the voting was successful (partyId and songId must exist), or null if unsuccessful.
  vote (partyId: Int!, songId: Int!): VotedSong

  # Advances the CurrentSong of a Party to the next song, which is the VotedSong with the highest VotedSong.count
  # out of all the VotedSong for the Party. This causes that VotedSong to be deleted, and the CurrentSong prior to
  # calling the mutation is used to create a PlayedSong for the Party. If there is no VotedSong for the Party, the
  # CurrentSong becomes null.
  # Returns the Party if successful, or null if unsuccessful.
  nextSong(partyId: Int!): Party
}

type Party {
  id: Int!

  # The name of this Party that was inputted by the party creator.
  # Must be unique among all Party.
  name: String!

  # The plaintext password for this Party, or null if the Party creator did not specify a password.
  password: String

  # The time that the Party was last interacted with. ISO 8601 format for date and time in UTC.
  latestTime: String!

  # The currently playing Song, or null if:
  # (1) this Party is new and no Song is playing yet, or
  # (2) the queue was empty and the "next song" button was pressed.
  currentSong: Song

  # All VotedSong for this Party in order of decreasing VotedSong.count.
  votedSongs: [VotedSong!]

  # All PlayedSong for this Party in order of decreasing PlayedSong.seq.
  playedSongs: [PlayedSong!]
}

type VotedSong {
  id: Int!

  # The Party whose users made this VotedSong.
  party: Party!

  # The Song that this VotedSong is for.
  song: Song!

  # The number of votes for this VotedSong.
  # Should always be >= 1, as a played song should have its VotedSong entry deleted.
  count: Int!
}

type PlayedSong {
  id: Int!

  # The Party that played this PlayedSong.
  party: Party!

  # The Song that was played.
  song: Song!

  # The sequence number of this PlayedSong, with each Party's song history sequency number starting from 0.
  seq: Int!
}

type Song {
  id: Int!

  # The title of the Song.
  title: String!

  # The Song artist's name(s).
  artist: String!

  # The Song's album name, or null if this data is not available.
  album: String
}
